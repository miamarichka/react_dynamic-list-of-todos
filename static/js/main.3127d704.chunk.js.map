{"version":3,"sources":["api.ts","types/Options.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","components/utils.tsx","index.tsx"],"names":["get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Options","getUser","userId","TodoList","todos","selectedTodo","clickHandler","className","map","todo","id","title","completed","classNames","type","onClick","SELECTED_OPTIONS","ALL","ACTIVE","COMPLETED","TodoFilter","onSelectedOption","onInputChange","inputValue","onClearQuery","onChange","e","target","value","option","toLowerCase","placeholder","style","pointerEvents","trim","Loader","TodoModal","user","onCloseBtn","href","email","name","App","useState","setTodos","setUser","currentTodo","setcurrentTodo","isDataReady","setIsDataReady","query","setQuery","setOption","loadTodos","a","todosFromServer","alert","loadUserInfo","userFromServer","useEffect","visibleTodos","useMemo","selectedTodos","filteredTodosArray","filter","includes","filteredTodos","useCallback","selectedOption","filterByQuery","searchQuery","clearQuery","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3127d704.chunk.js","sourcesContent":["import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","export enum Options{\n  ALL = 'All',\n  ACTIVE = 'Active',\n  COMPLETED = 'Completed',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  selectedTodo: Todo | null,\n  clickHandler: (userId:number, todo:Todo) => void;\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedTodo,\n  clickHandler,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map((todo) => {\n        const {\n          id, title, userId, completed,\n        } = todo;\n\n        return (\n          <tr\n            data-cy=\"todo\"\n            className=\"\"\n            key={id}\n          >\n            <td className=\"is-vcentered\">{id}</td>\n            <td className=\"is-vcentered\">\n              {completed && (\n                <span\n                  className=\"icon\"\n                  data-cy=\"iconCompleted\"\n                >\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p className={classNames({\n                'has-text-danger': !completed,\n                'has-text-success': completed,\n              })}\n              >\n                {title}\n\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => clickHandler(userId, todo)}\n              >\n                <span className=\"icon\">\n                  <i className={classNames('far',\n                    { 'fa-eye': todo.id !== selectedTodo?.id },\n                    { 'fa-eye-slash': todo.id === selectedTodo?.id })}\n                  />\n                </span>\n              </button>\n            </td>\n          </tr>\n        );\n      })}\n    </tbody>\n  </table>\n);\n","import React from 'react';\nimport { Options } from '../../types/Options';\n\ntype Props = {\n  onSelectedOption: (selectedOption: Options) => void;\n  onInputChange: (query: string) => void;\n  inputValue: string,\n  onClearQuery: () => void,\n};\n\nconst SELECTED_OPTIONS = [Options.ALL, Options.ACTIVE, Options.COMPLETED];\n\nexport const TodoFilter: React.FC<Props> = ({\n  onSelectedOption,\n  onInputChange,\n  inputValue,\n  onClearQuery,\n}) => {\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={e => onSelectedOption(e.target.value as Options)}\n          >\n            {SELECTED_OPTIONS.map(option => {\n              return (\n                <option\n                  value={option.toLowerCase()}\n                  key={option}\n                >\n                  {option}\n                </option>\n              );\n            })}\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={inputValue}\n          onChange={(e) => onInputChange(e.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {inputValue.trim() && (\n            // eslint-disable-next-line jsx-a11y/control-has-associated-label\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={onClearQuery}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  user: User | null,\n  todo: Todo | null,\n  onCloseBtn: () => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({ user, todo, onCloseBtn }) => {\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {todo && `Todo #${todo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onCloseBtn}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo?.completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              <a href={`\"mailto:${user.email}\"`}>\n                {user.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, {\n  useState, useEffect, useMemo, useCallback,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { getTodos, getUser } from './api';\n\nimport { Todo } from './types/Todo';\nimport { User } from './types/User';\nimport { Options } from './types/Options';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nimport { filteredTodos } from './components/utils';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [user, setUser] = useState<User | null>(null);\n  const [currentTodo, setcurrentTodo] = useState<Todo | null>(null);\n  const [isDataReady, setIsDataReady] = useState(false);\n  const [query, setQuery] = useState('');\n  const [option, setOption] = useState<Options>(Options.ALL);\n\n  const loadTodos = async () => {\n    try {\n      const todosFromServer = await getTodos();\n\n      setTodos(todosFromServer);\n    } catch {\n      // eslint-disable-next-line no-alert\n      alert('Sorry, there is no todos yet');\n    } finally {\n      setIsDataReady(true);\n    }\n  };\n\n  const loadUserInfo = async (userId:number) => {\n    const userFromServer = await getUser(userId);\n\n    setUser(userFromServer);\n    setIsDataReady(true);\n  };\n\n  useEffect(() => {\n    loadTodos();\n  }, []);\n\n  const visibleTodos = useMemo(() => {\n    return filteredTodos(todos, option, query);\n  }, [todos, option, query]);\n\n  const onTodoBtnClick = (userId: number, todo:Todo) => {\n    setcurrentTodo(todo);\n\n    loadUserInfo(userId);\n  };\n\n  const closeModal = () => {\n    setUser(null);\n    setcurrentTodo(null);\n  };\n\n  const selectedTodos = useCallback((selectedOption: Options) => {\n    setOption(selectedOption);\n  }, [option]);\n\n  const filterByQuery = useCallback((searchQuery: string) => {\n    setQuery(searchQuery);\n  }, [query]);\n\n  const clearQuery = useCallback(() => {\n    setQuery('');\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                onSelectedOption={selectedTodos}\n                onInputChange={filterByQuery}\n                inputValue={query}\n                onClearQuery={clearQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {!isDataReady && <Loader />}\n              <TodoList\n                todos={visibleTodos}\n                selectedTodo={currentTodo}\n                clickHandler={onTodoBtnClick}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (\n        <TodoModal\n          user={user}\n          todo={currentTodo}\n          onCloseBtn={closeModal}\n        />\n      )}\n    </>\n  );\n};\n","import { Todo } from '../types/Todo';\nimport { Options } from '../types/Options';\n\nexport const filteredTodos = (\n  todosFromServer: Todo[], option: Options, query: string,\n) => {\n  let selectedTodos:Todo[] = [...todosFromServer];\n\n  const filteredTodosArray: Todo[] = selectedTodos.filter((todo: Todo) => {\n    return todo.title.toLowerCase().includes(query.toLowerCase());\n  });\n\n  switch (option) {\n    case Options.ACTIVE.toLowerCase():\n      selectedTodos = filteredTodosArray.filter(todo => !todo.completed);\n      break;\n    case Options.COMPLETED.toLowerCase():\n      selectedTodos = filteredTodosArray.filter(todo => todo.completed);\n      break;\n    case Options.ALL.toLowerCase():\n      selectedTodos = filteredTodosArray;\n      break;\n    default:\n      selectedTodos = filteredTodosArray;\n  }\n\n  return selectedTodos;\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}